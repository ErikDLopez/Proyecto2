/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.gui.hanoi;

import com.functionalities.checkers.UpdateUser;
import com.functionalities.hanoi.Node;
import com.functionalities.hanoi.Pile;
import com.functionalities.utilities.files.Serialization;
import com.functionalities.utilities.files.User;
import com.gui.general.PrincipalGUI;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.JDialog;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author erik-lopez
 */
public class HanoiGUI extends javax.swing.JFrame {
    private int ID;
    public static User user;
    int counterMoves = 0;
    Pile pileA;
    Pile pileB;
    Pile pileC;
    DefaultTableModel modelTowerA, modelTowerB, modelTowerC;
    int numberDiscs = 0;
    double minNumberMoves = 0;
    boolean stop = false;
    private int startID;
    public static int seconds;
    public static int minutes;
    public static int hours;
    private int hundredthsSecond;
    public static Timer time;
    
    /**
     * Creates new form HanoiGUI
     */
    public HanoiGUI() {
        initComponents();
        ID = 0;
        startID = 0;
        seconds = 0;
        minutes = 0;
        hours = 0;
        hundredthsSecond = 0;
        time = new Timer(10, actions);
        defineModels();
        defineUser();
        this.setLocationRelativeTo(null);
    }

    public static int getSeconds() {
        return seconds;
    }

    public static void setSeconds(int seconds) {
        HanoiGUI.seconds = seconds;
    }

    public static int getMinutes() {
        return minutes;
    }

    public static void setMinutes(int minutes) {
        HanoiGUI.minutes = minutes;
    }

    public static int getHours() {
        return hours;
    }

    public static void setHours(int hours) {
        HanoiGUI.hours = hours;
    }
    
    public void defineUser() {
        user = SelectPlayerHanoi.getUser1();
        playerLabel.setText(user.getName());
    }
    
    public void defineModels() {
        modelTowerA = (DefaultTableModel) towerATable.getModel();
        modelTowerA.setRowCount(9);
        
        modelTowerB = (DefaultTableModel) towerBTable.getModel();
        modelTowerB.setRowCount(9);
        
        modelTowerC = (DefaultTableModel) towerCTable.getModel();
        modelTowerC.setRowCount(9);
        
        DefaultTableCellRenderer renderA = new DefaultTableCellRenderer();
        renderA.setHorizontalAlignment(SwingConstants.CENTER);
        towerATable.getColumnModel().getColumn(0).setCellRenderer(renderA);
        
        DefaultTableCellRenderer renderB = new DefaultTableCellRenderer();
        renderB.setHorizontalAlignment(SwingConstants.CENTER);
        towerBTable.getColumnModel().getColumn(0).setCellRenderer(renderB);
        
        DefaultTableCellRenderer renderC = new DefaultTableCellRenderer();
        renderC.setHorizontalAlignment(SwingConstants.CENTER);
        towerCTable.getColumnModel().getColumn(0).setCellRenderer(renderC);
    }
    private void updateLabel() {
        String text = (hours<=9?"0":"")+hours+":"+(minutes<=9?"0":"")+minutes+":"+(seconds<=9?"0":"")+seconds+":"+(hundredthsSecond<=9?"0":"")+hundredthsSecond;
        timerLabel.setText(text);
    }
    
    private ActionListener actions = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            hundredthsSecond++;
            if (hundredthsSecond == 100){
                seconds++;
                hundredthsSecond = 0;
            }
            if (seconds == 60){
                minutes++;
                seconds = 0;
            }
            if (minutes == 60){
                hours++;
                minutes = 0;
            }
            if (hours == 24){
                hours = 0;
            }
            updateLabel();
        }
    };
    
    private void clean() {
        counterMoves = 0;
        minNumberMoves = 0;
        numberDiscBox.setSelectedItem(String.valueOf(numberDiscs));
    }
    
    public void showNumberMoves() {
        counterMoves++;
        movesLabel.setText(String.valueOf(counterMoves));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        towerCTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        towerBTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        towerATable = new javax.swing.JTable();
        bcButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        restartButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cbButton = new javax.swing.JButton();
        acButton = new javax.swing.JButton();
        caButton = new javax.swing.JButton();
        abButton = new javax.swing.JButton();
        baButton = new javax.swing.JButton();
        minMovesLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        playerLabel = new javax.swing.JLabel();
        numberDiscBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        movesLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        timerLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        bgLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("HANOI");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        background.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.white));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        towerCTable.setBackground(new java.awt.Color(102, 102, 255));
        towerCTable.setFont(new java.awt.Font("Chandas", 1, 16)); // NOI18N
        towerCTable.setForeground(new java.awt.Color(0, 0, 0));
        towerCTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TOWER C"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        towerCTable.setAutoscrolls(false);
        towerCTable.setFocusable(false);
        towerCTable.setRowHeight(34);
        towerCTable.setRowSelectionAllowed(false);
        towerCTable.setShowVerticalLines(false);
        jScrollPane1.setViewportView(towerCTable);
        if (towerCTable.getColumnModel().getColumnCount() > 0) {
            towerCTable.getColumnModel().getColumn(0).setResizable(false);
        }

        background.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, 260, 330));

        towerBTable.setBackground(new java.awt.Color(0, 102, 102));
        towerBTable.setFont(new java.awt.Font("Chandas", 1, 16)); // NOI18N
        towerBTable.setForeground(new java.awt.Color(0, 0, 0));
        towerBTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TOWER B"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        towerBTable.setAutoscrolls(false);
        towerBTable.setFocusable(false);
        towerBTable.setRowHeight(34);
        towerBTable.setRowSelectionAllowed(false);
        towerBTable.setShowVerticalLines(false);
        jScrollPane2.setViewportView(towerBTable);
        if (towerBTable.getColumnModel().getColumnCount() > 0) {
            towerBTable.getColumnModel().getColumn(0).setResizable(false);
        }

        background.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 260, 330));

        towerATable.setBackground(new java.awt.Color(152, 69, 28));
        towerATable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        towerATable.setFont(new java.awt.Font("Chandas", 1, 16)); // NOI18N
        towerATable.setForeground(new java.awt.Color(0, 0, 0));
        towerATable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TOWER A"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        towerATable.setAutoscrolls(false);
        towerATable.setFocusable(false);
        towerATable.setRowHeight(34);
        towerATable.setRowSelectionAllowed(false);
        towerATable.setShowVerticalLines(false);
        jScrollPane3.setViewportView(towerATable);
        if (towerATable.getColumnModel().getColumnCount() > 0) {
            towerATable.getColumnModel().getColumn(0).setResizable(false);
        }

        background.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 260, 330));

        bcButton.setBackground(new java.awt.Color(102, 102, 255));
        bcButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/resources/images_Hanoi/letterC.png"))); // NOI18N
        bcButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        bcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcButtonActionPerformed(evt);
            }
        });
        background.add(bcButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 360, 80, 80));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        saveButton.setBackground(new java.awt.Color(102, 102, 0));
        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/resources/images/utilities/click2.png"))); // NOI18N
        saveButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jPanel1.add(saveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 460, 100, 100));

        startButton.setBackground(new java.awt.Color(51, 0, 51));
        startButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/resources/images/utilities/click2.png"))); // NOI18N
        startButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        jPanel1.add(startButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, 100, 100));

        restartButton.setBackground(new java.awt.Color(0, 153, 153));
        restartButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/resources/images/utilities/click2.png"))); // NOI18N
        restartButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });
        jPanel1.add(restartButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 180, 100, 100));

        helpButton.setBackground(new java.awt.Color(153, 0, 153));
        helpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/resources/images/utilities/click2.png"))); // NOI18N
        helpButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        jPanel1.add(helpButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 320, 100, 100));

        jLabel5.setFont(new java.awt.Font("Chandas", 3, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 204, 204));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("GUARDAR");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 480, 160, 50));

        jLabel6.setFont(new java.awt.Font("Chandas", 3, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 204, 204));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("INICIAR");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 160, 50));

        jLabel7.setFont(new java.awt.Font("Chandas", 3, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 204, 204));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("REINICIAR");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 160, 50));

        jLabel8.setFont(new java.awt.Font("Chandas", 3, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 204, 204));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("RESOLVER");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 160, 50));

        background.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 10, 320, 630));

        cbButton.setBackground(new java.awt.Color(0, 102, 102));
        cbButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/resources/images_Hanoi/letterB.png"))); // NOI18N
        cbButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        cbButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbButtonActionPerformed(evt);
            }
        });
        background.add(cbButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 360, 80, 80));

        acButton.setBackground(new java.awt.Color(102, 102, 255));
        acButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/resources/images_Hanoi/letterC.png"))); // NOI18N
        acButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        acButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acButtonActionPerformed(evt);
            }
        });
        background.add(acButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 360, 80, 80));

        caButton.setBackground(new java.awt.Color(204, 102, 51));
        caButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/resources/images_Hanoi/letterA.png"))); // NOI18N
        caButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        caButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caButtonActionPerformed(evt);
            }
        });
        background.add(caButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 360, 80, 80));

        abButton.setBackground(new java.awt.Color(0, 102, 102));
        abButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/resources/images_Hanoi/letterB.png"))); // NOI18N
        abButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        abButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abButtonActionPerformed(evt);
            }
        });
        background.add(abButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 360, 80, 80));

        baButton.setBackground(new java.awt.Color(255, 102, 51));
        baButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/resources/images_Hanoi/letterA.png"))); // NOI18N
        baButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baButtonActionPerformed(evt);
            }
        });
        background.add(baButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 360, 80, 80));

        minMovesLabel.setFont(new java.awt.Font("Chandas", 3, 14)); // NOI18N
        minMovesLabel.setForeground(new java.awt.Color(0, 204, 204));
        minMovesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        minMovesLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153)));
        background.add(minMovesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 590, 240, 40));

        jLabel2.setFont(new java.awt.Font("Chandas", 3, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 204, 204));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Movimientos minimos");
        background.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 570, 220, 40));

        playerLabel.setFont(new java.awt.Font("Chandas", 3, 14)); // NOI18N
        playerLabel.setForeground(new java.awt.Color(0, 204, 204));
        playerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playerLabel.setText("Nombre");
        background.add(playerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 490, 150, 40));

        numberDiscBox.setBackground(new java.awt.Color(0, 51, 51));
        numberDiscBox.setFont(new java.awt.Font("Chandas", 0, 12)); // NOI18N
        numberDiscBox.setForeground(new java.awt.Color(255, 255, 255));
        numberDiscBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "3", "4", "5", "6", "7", "8" }));
        numberDiscBox.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        background.add(numberDiscBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 470, 240, 30));

        jLabel4.setFont(new java.awt.Font("Chandas", 3, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 204, 204));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Movimientos Realizados");
        background.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 520, 220, 40));

        movesLabel.setFont(new java.awt.Font("Chandas", 3, 14)); // NOI18N
        movesLabel.setForeground(new java.awt.Color(0, 204, 204));
        movesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        movesLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 153), 1, true));
        background.add(movesLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 520, 240, 40));

        jLabel9.setFont(new java.awt.Font("Chandas", 3, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 204, 204));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Numero de discos");
        background.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 460, 150, 50));

        timerLabel.setFont(new java.awt.Font("Chandas", 3, 14)); // NOI18N
        timerLabel.setForeground(new java.awt.Color(0, 204, 204));
        timerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timerLabel.setText("00:00:00:00");
        background.add(timerLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 590, 150, 40));

        jSeparator1.setBackground(new java.awt.Color(255, 255, 255));
        background.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 630, 200, 20));

        jLabel3.setFont(new java.awt.Font("Chandas", 3, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 204, 204));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("para su resolucion");
        background.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 600, 210, 40));

        jLabel11.setFont(new java.awt.Font("Chandas", 3, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 204, 204));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("JUGADOR");
        background.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 460, 150, 40));

        jLabel12.setFont(new java.awt.Font("Chandas", 3, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 204, 204));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("CRONOMETRO");
        background.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 550, 150, 40));

        jSeparator2.setBackground(new java.awt.Color(255, 255, 255));
        background.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 530, 200, 20));

        bgLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/resources/images_Hanoi/hanoiBG.jpg"))); // NOI18N
        bgLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.white, java.awt.Color.white));
        bgLabel.setFocusable(false);
        background.add(bgLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 650));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (ID == 0){
            MenuHanoi menuHanoi = new MenuHanoi();
            menuHanoi.setVisible(true);
        }
    }//GEN-LAST:event_formWindowClosing

    private void abButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abButtonActionPerformed
        moveAB();
    }//GEN-LAST:event_abButtonActionPerformed
    
    private void moveAB(){
        try{
            if (pileA.getCounterNode() > 0) {
                Node platform  = new Node();
                platform.setData(pileA.peek());
                
                if (pileB.getCounterNode() > 0) {
                    if (platform.getData().compareTo(pileB.peek()) > 0) {
                        return;
                    }
                }
                pileA.pop();
                pileB.push(platform);
                showTowerA();
                showTowerB();
                showNumberMoves();
            }
        } catch (Exception e) {
            System.out.println("Error en el movimiento AB");
        }
    }
    
    public void saveData(int typeGame){
        int moves = Integer.parseInt(movesLabel.getText());
        System.out.println("\nSe guardaron los datos de la partida");
        UpdateUser update = new UpdateUser();
        update.updateStats(MenuHanoi.getUsersHanoi(),user, typeGame, moves,2);
        
        Serialization serialize = new Serialization();
        serialize.serializeUsers(MenuHanoi.getUsersHanoi(),"Hanoi_users.dat");
    }
    
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        counterMoves = 0;
        time.start();
        start();
        startID = 1;
        startButton.setEnabled(false);
        
    }//GEN-LAST:event_startButtonActionPerformed

    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
        if (startID == 0) {
           JOptionPane.showMessageDialog(null,"Primero debe iniciar la partida");
        }
        if (startID == 1){
            restart();
            helpButton.setEnabled(true);
            startButton.setEnabled(true);
            abButton.setEnabled(true);
            acButton.setEnabled(true);
            baButton.setEnabled(true);
            bcButton.setEnabled(true);
            cbButton.setEnabled(true);
            caButton.setEnabled(true);
            startID = 0;
            seconds = 0;
            minutes = 0;
            hours = 0;
            hundredthsSecond = 0;
            updateLabel();
        }
    }//GEN-LAST:event_restartButtonActionPerformed

    private void acButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acButtonActionPerformed
        moveAC();
    }//GEN-LAST:event_acButtonActionPerformed

    private void moveAC(){
        try{
            if (pileA.getCounterNode() > 0) {
                Node platform  = new Node();
                platform.setData(pileA.peek());
                
                if (pileC.getCounterNode() > 0) {
                    if (platform.getData().compareTo(pileC.peek()) > 0) {
                        return;
                    }
                }
                pileA.pop();
                pileC.push(platform);
                showTowerA();
                showTowerC();
                showNumberMoves();
                
                if (pileC.getCounterNode() == numberDiscs && minNumberMoves == counterMoves) {
                    JOptionPane.showMessageDialog(null,"Completo las torres de Hanoi con el minimo de movimientos!");
                    time.stop();
                    saveData(1);
                } else if(pileC.getCounterNode() == numberDiscs && minNumberMoves != counterMoves) {
                    JOptionPane.showMessageDialog(null,"Torres de Hanoi completadas, puedes mejorar los movimientos");
                    time.stop();
                    saveData(1);
                }
            }
        } catch (Exception e) {
            System.out.println("Error en el movimiento AB");
        }
    }
    
    private void baButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baButtonActionPerformed
        moveBA();
    }//GEN-LAST:event_baButtonActionPerformed
    
    private void moveBA(){
        try{
            if (pileB.getCounterNode() > 0) {
                Node platform  = new Node();
                platform.setData(pileB.peek());
                
                if (pileA.getCounterNode() > 0) {
                    if (platform.getData().compareTo(pileA.peek()) > 0) {
                        return;
                    }
                }
                pileB.pop();
                pileA.push(platform);
                showTowerA();
                showTowerB();
                showNumberMoves();
            }
        } catch (Exception e) {
            System.out.println("Error en el movimiento AB");
        }
    }
    
    private void bcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcButtonActionPerformed
        moveBC();
    }//GEN-LAST:event_bcButtonActionPerformed
    
    private void moveBC(){
        try{
            if (pileB.getCounterNode() > 0) {
                Node platform  = new Node();
                platform.setData(pileB.peek());
                
                if (pileC.getCounterNode() > 0) {
                    if (platform.getData().compareTo(pileC.peek()) > 0) {
                        return;
                    }
                }
                pileB.pop();
                pileC.push(platform);
                showTowerB();
                showTowerC();
                showNumberMoves();
                
                if (pileC.getCounterNode() == numberDiscs && minNumberMoves == counterMoves) {
                    JOptionPane.showMessageDialog(null,"Completo las torres de Hanoi con el minimo de movimientos!");
                    time.stop();
                    saveData(1);
                } else if(pileC.getCounterNode() == numberDiscs && minNumberMoves != counterMoves) {
                    JOptionPane.showMessageDialog(null,"Torres de Hanoi completadas, puedes mejorar los movimientos");
                    time.stop();
                    saveData(1);
                }
            }
        } catch (Exception e) {
            System.out.println("Error en el movimiento AB");
        }
    }
    
    private void caButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caButtonActionPerformed
        moveCA();
    }//GEN-LAST:event_caButtonActionPerformed
    
    private void moveCA(){
        try{
            if (pileC.getCounterNode() > 0) {
                Node platform  = new Node();
                platform.setData(pileC.peek());
                
                if (pileA.getCounterNode() > 0) {
                    if (platform.getData().compareTo(pileA.peek()) > 0) {
                        return;
                    }
                }
                pileC.pop();
                pileA.push(platform);
                showTowerA();
                showTowerC();
                showNumberMoves();
            }
        } catch (Exception e) {
            System.out.println("Error en el movimiento AB");
        }
    }
    
    private void cbButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbButtonActionPerformed
        moveCB();
    }//GEN-LAST:event_cbButtonActionPerformed

    private void moveCB(){
        try{
            if (pileC.getCounterNode() > 0) {
                Node platform  = new Node();
                platform.setData(pileC.peek());
                
                if (pileB.getCounterNode() > 0) {
                    if (platform.getData().compareTo(pileB.peek()) > 0) {
                        return;
                    }
                }
                pileC.pop();
                pileB.push(platform);
                showTowerC();
                showTowerB();
                showNumberMoves();
            }
        } catch (Exception e) {
            System.out.println("Error en el movimiento AB");
        }
    }
    
    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        
        if (!minMovesLabel.getText().equals("") && pileC.getCounterNode() != numberDiscs) {
            JOptionPane.showMessageDialog(null,"MODO SOLUCION RAPIDA ACTIVADO");
            restart();
            stop = false;
            recursiveHanoi(numberDiscs, pileA, pileB, pileC);
            
            int totalMoves = Integer.parseInt(movesLabel.getText());
            int minMoves = Integer.parseInt(minMovesLabel.getText());
            
            if (totalMoves == minMoves) {
                time.stop();
                JOptionPane.showMessageDialog(null,"SOLUCION RAPIDA HA TERMINADO");
                saveData(0);
                helpButton.setEnabled(false);
                abButton.setEnabled(false);
                acButton.setEnabled(false);
                baButton.setEnabled(false);
                bcButton.setEnabled(false);
                cbButton.setEnabled(false);
                caButton.setEnabled(false);
            }
        } else {
            JOptionPane.showMessageDialog(null,"INICIE LA PARTIDA PARA PODER USAR ESTA OPCION");
        }
    }//GEN-LAST:event_helpButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (startID == 0) {
           JOptionPane.showMessageDialog(null,"Primero debe iniciar la partida");
        }
        if (startID == 1){
        }
    }//GEN-LAST:event_saveButtonActionPerformed
    
    public void movePlatform(Pile origin, Pile destiny) {
        if (stop == false){
            Node platform = new Node();
            platform.setData(origin.peek());
            origin.pop();
            destiny.push(platform);
            showTowerA();
            showTowerB();
            showTowerC();
            showNumberMoves();
            
            JOptionPane.showMessageDialog(null, "Movimiento No. "+movesLabel.getText());
            
        }
    }
    
    public void recursiveHanoi(int n, Pile origin, Pile auxiliar, Pile destiny) {
        System.out.println("n es igual a: "+n);
        
        if (n == 1) {
            movePlatform(origin, destiny);
        } else {
            recursiveHanoi(n - 1, origin, destiny, auxiliar);
            movePlatform(origin, destiny);
            recursiveHanoi(n - 1, auxiliar, origin, destiny);
        }
    
    }
    
    private void start() {
        try {
            pileA = new Pile();
            pileB = new Pile();
            pileC = new Pile();
        
            numberDiscs = Integer.parseInt(numberDiscBox.getSelectedItem().toString());
            minNumberMoves = Math.pow(2, numberDiscs) - 1;
            movesLabel.setText(String.valueOf(counterMoves));
            minMovesLabel.setText(String.valueOf(String.format("%.0f", minNumberMoves)));
        
            for (int x = numberDiscs; x >= 1; x--) {
                Node plataform = new Node();
                String disc = "";
            
                for(int y = x; y > 0 ; y--) {
                    disc += " = ";
                }
                plataform.setData(disc);
                pileA.push(plataform);
            }
            showTowerA();
            showTowerB();
            showTowerC();
        } catch (Exception e) {
            System.out.println("\nOcurrio un error en el manejo de las pilas");
        }
    
    }
    
    private void showTowerA() {
        ((DefaultTableModel)towerATable.getModel()).setRowCount(0);
        modelTowerA.setRowCount(9);
        Node node;
        
        int rowDisc = (9- pileA.getCounterNode());
        
        if (pileA.getCounterNode() > 0) {
            for(node = pileA.getHead(); node.getDown() != null; node = node.getDown()) {
                String[] vector = {node.getData()};
                modelTowerA.insertRow(rowDisc, vector);
                rowDisc++;
            }
            if (node.getDown() == null) {
                String[] vector  = {node.getData()};
                modelTowerA.insertRow(rowDisc, vector);
            }
            
        }
        towerATable.setModel(modelTowerA);
        modelTowerA.setRowCount(9);
    }
    
    private void showTowerB() {
        ((DefaultTableModel)towerBTable.getModel()).setRowCount(0);
        modelTowerB.setRowCount(9);
        Node node;
        
        int rowDisc = (9- pileB.getCounterNode());
        
        if (pileB.getCounterNode() > 0) {
            for(node = pileB.getHead(); node.getDown() != null; node = node.getDown()) {
                String[] vector = {node.getData()};
                modelTowerB.insertRow(rowDisc, vector);
                rowDisc++;
            }
            if (node.getDown() == null) {
                String[] vector  = {node.getData()};
                modelTowerB.insertRow(rowDisc, vector);
            }
            
        }
        towerBTable.setModel(modelTowerB);
        modelTowerB.setRowCount(9);
    }
    
    private void showTowerC() {
        ((DefaultTableModel)towerCTable.getModel()).setRowCount(0);
        modelTowerC.setRowCount(9);
        Node node;
        
        int rowDisc = (9- pileC.getCounterNode());
        
        if (pileC.getCounterNode() > 0) {
            for(node = pileC.getHead(); node.getDown() != null; node = node.getDown()) {
                String[] vector = {node.getData()};
                modelTowerC.insertRow(rowDisc, vector);
                rowDisc++;
            }
            if (node.getDown() == null) {
                String[] vector  = {node.getData()};
                modelTowerC.insertRow(rowDisc, vector);
            }
            
        }
        towerCTable.setModel(modelTowerC);
        modelTowerC.setRowCount(9);
    }
    
    private void restart() {
        try {
            clean();
            start();
        } catch (Exception e) {
            System.out.println("\nOcurrio un error en el manejo de las pilas");
        }
    
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(HanoiGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(HanoiGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(HanoiGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(HanoiGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HanoiGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abButton;
    private javax.swing.JButton acButton;
    private javax.swing.JButton baButton;
    private javax.swing.JPanel background;
    private javax.swing.JButton bcButton;
    private javax.swing.JLabel bgLabel;
    private javax.swing.JButton caButton;
    private javax.swing.JButton cbButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel minMovesLabel;
    private javax.swing.JLabel movesLabel;
    private javax.swing.JComboBox<String> numberDiscBox;
    private javax.swing.JLabel playerLabel;
    private javax.swing.JButton restartButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel timerLabel;
    private javax.swing.JTable towerATable;
    private javax.swing.JTable towerBTable;
    private javax.swing.JTable towerCTable;
    // End of variables declaration//GEN-END:variables
}
